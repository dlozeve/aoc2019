(defparameter *input-file* #P"input.txt")
(defparameter *input* (uiop:read-file-string *input-file*))

(defvar *program*)

(defun opcode (instruction-code)
  (mod instruction-code 100))

(defun parameter-mode (instruction-code parameter-index)
  (nth (- parameter-index 1)
       (reverse (map 'list #'digit-char-p
		     (prin1-to-string (floor (/ instruction-code 100)))))))

(defun get-parameter (pc parameter-index)
  (let ((mode (parameter-mode (aref *program* pc) parameter-index)))
    (if (eql 1 mode)
	(aref *program* (+ parameter-index pc))
	(aref *program* (aref *program* (+ pc parameter-index))))))

(defun execute (inputs)
  (defun execute-instruction (pc inputs outputs)
    ;(format t "~a ~a ~a ~a~%" *program* i inputs outputs)
    (ecase (opcode (aref *program* pc))
      (99 (return-from execute-instruction (values *program* outputs)))
      (1 (setf (aref *program* (aref *program* (+ 3 pc)))
	       (+ (get-parameter pc 1)
		  (get-parameter pc 2)))
	 (execute-instruction (+ pc 4) inputs outputs))
      (2 (setf (aref *program* (aref *program* (+ 3 pc)))
	       (* (get-parameter pc 1)
		  (get-parameter pc 2)))
	 (execute-instruction (+ pc 4) inputs outputs))
      (3 (setf (aref *program* (aref *program* (+ 1 pc)))
	       (car inputs))
	 (execute-instruction (+ pc 2) (cdr inputs) outputs))
      (4 (execute-instruction (+ pc 2) inputs (cons (get-parameter pc 1) outputs)))
      (5 (if (/= 0 (get-parameter pc 1))
	     (execute-instruction (get-parameter pc 2) inputs outputs)
	     (execute-instruction (+ pc 3) inputs outputs)))
      (6 (if (= 0 (get-parameter pc 1))
	     (execute-instruction (get-parameter pc 2) inputs outputs)
	     (execute-instruction (+ pc 3) inputs outputs)))
      (7 (if (< (get-parameter pc 1) (get-parameter pc 2))
	     (setf (aref *program* (aref *program* (+ pc 3))) 1)
	     (setf (aref *program* (aref *program* (+ pc 3))) 0))
	 (execute-instruction (+ pc 4) inputs outputs))
      (8 (if (= (get-parameter pc 1) (get-parameter pc 2))
	     (setf (aref *program* (aref *program* (+ pc 3))) 1)
	     (setf (aref *program* (aref *program* (+ pc 3))) 0))
	 (execute-instruction (+ pc 4) inputs outputs))))
  (execute-instruction 0 inputs nil))

(defun parse-program (program-string)
  (map 'vector #'parse-integer (uiop:split-string program-string :separator ",")))

(defun part1 ()
  (let ((*program* (parse-program *input*)))
    (car (nth-value 1 (execute '(1))))))

(defun part2 ()
  (let ((*program* (parse-program *input*)))
    (car (nth-value 1 (execute '(5))))))

(assert (= (part1) 12896948))
(assert (= (part2) 7704130))
